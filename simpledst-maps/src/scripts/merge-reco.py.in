#!/bin/env python

import sys, os, glob, re, argparse
import datetime as dt
import random
import subprocess

#sys.path.append('/home/fmcnally/npx4')
from npx4.pysubmit import pysubmit

""" 
INSTRUCTIONS: before executing, change hardcoded paths anywhere you see 
the word 'CHANGE'.
"""



## Special cases for binning in energy. Calling the flag
## without values will default to the listed values.
class defaultValues(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        bins = {}
        bins['ebins'] = [4, 4.25, 4.5, 4.75, 5, 5.25, 5.5, 6, 6.5, 100]
        if not values:
            setattr(namespace, self.dest, bins[self.dest])
        else:
            setattr(namespace, self.dest, values)


if __name__ == "__main__":

    p = argparse.ArgumentParser(
            description='Makes daily healpix maps using time-scrambling code')

    # General parameters
    p.add_argument('-c', '--config', dest='config',
            help='Detector configuration [IC86-2011,IC86-2012,IC86-2013...]')
    p.add_argument('-d', '--dates', dest='dates', type=str,
            default=None, nargs='*',
            help='Dates to process [yyyymmdd] (optional, inclusive)')
    p.add_argument('--inclusive', dest='inclusive',
            default=False, action='store_true',
            help='Treat two dates given as inclusive. Otherwise treat as list')
    p.add_argument('--pedantic', dest='pedantic',
            default=False, action='store_true',
            help='Exit if a date or file are missing.')
    p.add_argument('--sd', dest='sundp',
            default=False, action='store_true',
            help='Correct for solar dipole on event-by-event basis')
    p.add_argument('--reco', dest='reco',
            default=False, action='store_true',
            help='Run iter-llh-reco')

    # Energy cut options
    p.add_argument('--ebins', dest='ebins',
            default=False, action=defaultValues, nargs='*',
            help='Option to do all energy bins')

    # Additional options
    p.add_argument('-o', '--outdir', dest='outdir',
            default='/data/ana/CosmicRay/Anisotropy/IceTop/ITpass2/output/USER_SPECIFIC_DIR/ITpass2_sd',
            help='Destination directory for output files')
    p.add_argument('-i', '--indir', dest='indir',
            default=None,
            help='Source directory for input files (if not set. Assume outdir)')
    p.add_argument('--test', dest='test',
            default=False, action='store_true',
            help='Option for running off cluster to test')
    p.add_argument('--overwrite', dest='overwrite',
            default=False, action='store_true',
            help='Option to overwrite existing map files')
    p.add_argument('--cvmfs', dest='cvmfs',
            default='/cvmfs/icecube.opensciencegrid.org/py3-v4.2.1',
            help='CVMFS environment')
    p.add_argument('--submit_dir', dest='submit_dir',
            default='/home/USER_SPECIFIC_DIR/cra-tools-gb-edits/simpledst-maps/src/submit',
            help='submit directory')
    p.add_argument('--elogmax', dest='elogmax',type=float,
            default=0.0,
            help='max log energy/GeV')
    p.add_argument('--elogmin', dest='elogmin',type=float,
            default=0.0,
            help='min log energy/GeV')
    p.add_argument('--smax', dest='smax',type=int,
            default=0,
            help='max nStations')
    p.add_argument('--smin', dest='smin',type=int,
            default=0,
            help='min nStations')
    p.add_argument('--ndirc_min', dest='ndirc_min',
            default=9,
            help='min ndir value')
    p.add_argument('--ldirc_min', dest='ldirc_min',
            default=200,
            help='min ldir value')
    p.add_argument('--rlogmax', dest='rlogmax',
            default=15,
            help='maximum reduced log-likelyhood')
    p.add_argument('--nside', dest='nsideout',
            default=64,
            help='Healpix NSide parameter')
    ### USER-SPECIFIC PATHS (CHANGE) ###
    """ These paths all refer to directories. Make sure you create your
    own directories as needed """
    # Submitter capable of submitting multiple days as one job, w/
    # TimeScramble.cc reading filelist from .txt file.
    #  - determines .txt file location (can remove after jobs run) 

    args = p.parse_args()

    if args.indir is None:
        args.indir = args.outdir
    
    c_opts = vars(args).copy()
    s_opts = vars(args).copy()
    if not args.config:
        p.error('Detector configuration not given')

    # Base name for outfiles
    outBase = '{outdir}/{config}'.format(**c_opts)
    inBase = '{indir}/{config}'.format(**c_opts)
    if args.sundp:
       outBase += '_sd'
       inBase += '_sd'
    c_opts['outBase'] = outBase
    c_opts['inBase'] = inBase

    # Create output directories if they don't already exist
    if not os.path.isdir('{outBase}'.format(**c_opts)):
        print('Creating output directory {outBase}'.format(**c_opts))
        os.makedirs('{outBase}'.format(**c_opts))

    # Create list of desired dates
    if args.dates != None and not args.inclusive:
        runDates = ['{}-{}-{}'.format(d[:4],d[4:6],d[6:8]) for d in args.dates]
    if args.dates != None and args.inclusive:
        s = args.dates[0]
        e = args.dates[-1]
        sdate = dt.date(int(s[:4]), int(s[4:6]), int(s[6:8]))
        edate = dt.date(int(e[:4]), int(e[4:6]), int(e[6:8]))
        delta = edate - sdate
        runDates = [sdate + dt.timedelta(days=i) for i in range(delta.days+1)]
        runDates = [date.strftime('%Y-%m-%d') for date in runDates]


    # Set up parameters to feed C++ script
    print('Parameters for submission:')
    validArgs  = ['nsideout']
    c_opts = {k:v for k,v in c_opts.items() if v!=None and k in validArgs}
    for key in sorted(c_opts.keys()):
        print('  --%s %s' % (key, c_opts[key]))
    c_opts = [['--'+key, c_opts[key]] for key in sorted(c_opts.keys())]
    # Python magic: flatten list of arbitrary depth into list of strings
    flatList = lambda *n: (str(e) for a in n \
            for e in (flatList(*a) if isinstance(a, (tuple, list)) else (a,)))
    c_opts = list(flatList(c_opts))
    # Ebins need to go last (multitoken parameters)

    sublines = ["request_memory = 3000"]
    # Environment for script
    header = ['#!/bin/bash ']
    if args.cvmfs:
        header = ['#!/bin/sh','eval `' +args.cvmfs +'/setup.sh`']

    # Submit files
    if not os.path.isdir(args.submit_dir):
        os.makedirs(args.submit_dir)
    if not os.path.isdir('{}/combined'.format(outBase)):
        os.makedirs('{}/combined'.format(outBase))

    s_opts['detector'] = "ICECUBE" 
    if args.config.startswith("IT"):
        s_opts['detector'] = "ICETOP" 

    shexec=''
    s_opts["erange"] = ""
    s_opts["srange"] = ""
    if args.elogmax > 0:
        s_opts["erange"] = "_{elogmin:.2f}-{elogmax:.2f}GeV".format(**s_opts)
    srangestr = ""

    if args.smax > 0:
        s_opts["srange"] = "_{smin:d}-{smax:d}S".format(**s_opts)
    infile_prefix = "CR_{detector}_LOCAL{erange}{srange}_NSIDE{nsideout}_degbin-"
    infile = infile_prefix+"{degbin:03d}.fits.gz"

    for degbin in range(0,360):

        # Filter by desired dates
        if args.dates is None: 
            print(os.path.join(inBase,"*",infile).format(**s_opts,degbin=degbin))
            filelist = glob.glob(os.path.join(inBase,"*",infile).format(**s_opts,degbin=degbin))
            if not filelist:
                print("no input files found!:")
                print(os.path.join(inBase,"*",infile).format(**s_opts,degbin=degbin))
                os._exit(1)
        else:
            filelist = []
            for date in runDates:
                f = os.path.join(inBase,date,infile).format(**s_opts,degbin=degbin)
                if os.path.exists(f):
                    filelist.append(f)
                elif args.pedantic:
                    print("error:","file",f,"does not exist!")
                    os._exit(1)
                else:
                    print("warning:", "file",f,"does not exist!")
                    

        outfile = infile.format(**s_opts,degbin=degbin)
        jobID = 'combinelocalmaps_%s_%05i_%05i' % (args.config, degbin, random.randint(0,99999))
        cmd  = '/home/gagrawal/cra-tools-gb-edits/simpledst-maps/build/bin/combine-local-maps' 
        #ex = [cmd] + c_opts + ['--outfile','{}/combined/{}'.format(outBase,outfile), '--input', " ".join(filelist) ]
        ex = [cmd] + c_opts + ['--outfile','{}/combined/{}'.format(outBase,outfile), '--input'] +filelist
        #ex = [cmd, c_opts,'--outfile','{}/combined/{}'.format(outBase,outfile), '--input', " ".join(filelist) ]
        print(' '.join(ex[0:10]),'...')
        print('')
        shexec += ' '.join(ex)
        shexec += ';\n'

    if args.reco:

        reco_prefix = infile_prefix.format(**s_opts)
        cmd  = '/home/gagrawal/cra-tools-gb-edits/simpledst-maps/build/bin/illh-reco'
        ex  = [cmd, 
            '--cfg','/home/gagrawal/cra-tools-gb-edits/simpledst-maps/build/resources/{detector}.json'.format(**s_opts),
            '--prefix','{}/combined/{}'.format(outBase,reco_prefix), 
            '--suffix','.fits.gz',
            '--outdir','{}/reco'.format(outBase),
            ]
        shexec += '\n#Reconstruct;\n'
        shexec += ' '.join(ex)
        shexec += ';\n'

    if not args.test:
       pysubmit(shexec, sublines=sublines, test=args.test, jobID=jobID,
                outdir=args.submit_dir,
                header=header
                )
    else:
       print(shexec)
     
